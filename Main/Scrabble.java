/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Main;

import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.border.Border;

/**
 *
 * @author Pretelt Juan
 */
public class Scrabble extends javax.swing.JFrame implements MouseListener {

    public Scrabble() {

        initComponents();
        setLocationRelativeTo(null);
        diccionario = new Diccionario("src/Main/diccionario.txt");
        combinar = new Combinar(diccionario);
        menu.setVisible(true);
        gamePanels.setVisible(false);
        setFocusable(true);
        alertaFinJuego.setLocationRelativeTo(this);
        alertaFinJuego.setUndecorated(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu1 = new javax.swing.JPopupMenu();
        panelPedirLetra = new javax.swing.JPanel();
        vocalBTN = new javax.swing.JButton();
        consonanteBTN = new javax.swing.JButton();
        alertaFinJuego = new javax.swing.JDialog();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        labelGanador = new javax.swing.JLabel();
        menu = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        btnSalir = new javax.swing.JButton();
        btnJugar = new javax.swing.JButton();
        btnAjustes = new javax.swing.JButton();
        gamePanels = new javax.swing.JPanel();
        contenedorCombinaciones = new javax.swing.JPanel();
        panelCombinations = new javax.swing.JPanel();
        titleCombinations = new javax.swing.JLabel();
        panelPuntajes = new javax.swing.JPanel();
        tablero = new javax.swing.JPanel();
        panelPlayer1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        letrasJugador1 = new javax.swing.JLabel();
        mostrarCombinaciones1 = new javax.swing.JButton();
        pedirLetraPlayer1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        puntajePlayer1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        panelPlayer2 = new javax.swing.JPanel();
        mostrarCombinaciones2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        letrasJugador2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pedirLetraPlayer2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        puntajePlayer2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        labelTurnos = new javax.swing.JLabel();

        popupMenu1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        popupMenu1.setBorderPainted(false);

        vocalBTN.setText("VOCAL");
        vocalBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vocalBTNActionPerformed(evt);
            }
        });
        panelPedirLetra.add(vocalBTN);

        consonanteBTN.setText("CONSONANTE");
        consonanteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consonanteBTNActionPerformed(evt);
            }
        });
        panelPedirLetra.add(consonanteBTN);

        alertaFinJuego.setAlwaysOnTop(true);
        alertaFinJuego.setFocusable(false);
        alertaFinJuego.setPreferredSize(new java.awt.Dimension(350, 300));
        alertaFinJuego.setResizable(false);
        alertaFinJuego.setSize(new java.awt.Dimension(350, 350));

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("FIN JUEGO");

        jButton1.setText("MENU PRINCIPAL");
        jButton1.setPreferredSize(new java.awt.Dimension(130, 30));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("CERRAR JUEGO");
        jButton2.setPreferredSize(new java.awt.Dimension(130, 30));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout alertaFinJuegoLayout = new javax.swing.GroupLayout(alertaFinJuego.getContentPane());
        alertaFinJuego.getContentPane().setLayout(alertaFinJuegoLayout);
        alertaFinJuegoLayout.setHorizontalGroup(
            alertaFinJuegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(alertaFinJuegoLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(alertaFinJuegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(alertaFinJuegoLayout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(alertaFinJuegoLayout.createSequentialGroup()
                        .addComponent(labelGanador, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(11, Short.MAX_VALUE))
            .addGroup(alertaFinJuegoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        alertaFinJuegoLayout.setVerticalGroup(
            alertaFinJuegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(alertaFinJuegoLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelGanador, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addGroup(alertaFinJuegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SCRABBLE");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        menu.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        title.setFont(new java.awt.Font("Candara", 1, 36)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("SCRABBLE");
        title.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        menu.add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 100));

        btnSalir.setFont(new java.awt.Font("Candara", 1, 24)); // NOI18N
        btnSalir.setText("SALIR");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        menu.add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(375, 430, 150, 50));

        btnJugar.setFont(new java.awt.Font("Candara", 1, 24)); // NOI18N
        btnJugar.setText("JUGAR");
        btnJugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJugarActionPerformed(evt);
            }
        });
        menu.add(btnJugar, new org.netbeans.lib.awtextra.AbsoluteConstraints(375, 190, 150, 50));

        btnAjustes.setFont(new java.awt.Font("Candara", 1, 24)); // NOI18N
        btnAjustes.setText("AJUSTES");
        btnAjustes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAjustesActionPerformed(evt);
            }
        });
        menu.add(btnAjustes, new org.netbeans.lib.awtextra.AbsoluteConstraints(375, 320, 150, 50));

        getContentPane().add(menu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 600));

        gamePanels.setEnabled(false);
        gamePanels.setOpaque(false);
        gamePanels.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        contenedorCombinaciones.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        contenedorCombinaciones.setName("Name"); // NOI18N
        contenedorCombinaciones.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        contenedorCombinaciones.add(panelCombinations, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, 130, 370));

        titleCombinations.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleCombinations.setToolTipText("");
        titleCombinations.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        contenedorCombinaciones.add(titleCombinations, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 340, 50));
        contenedorCombinaciones.add(panelPuntajes, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 60, 120, 370));

        gamePanels.add(contenedorCombinaciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 40, 340, 440));

        tablero.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tablero.setPreferredSize(new java.awt.Dimension(470, 470));
        tablero.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableroKeyPressed(evt);
            }
        });
        tablero.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 6, 6));
        gamePanels.add(tablero, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, -1, -1));

        panelPlayer1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        panelPlayer1.setPreferredSize(new java.awt.Dimension(400, 250));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("JUGADOR 1");

        jLabel4.setText("LETRAS EN MANO:");

        letrasJugador1.setFont(new java.awt.Font("Candara Light", 1, 24)); // NOI18N
        letrasJugador1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        letrasJugador1.setText("C A S A");

        mostrarCombinaciones1.setText("MOSTRAR COMBINACIONES");
        mostrarCombinaciones1.setFocusable(false);
        mostrarCombinaciones1.setPreferredSize(new java.awt.Dimension(190, 30));
        mostrarCombinaciones1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarCombinaciones1ActionPerformed(evt);
            }
        });

        pedirLetraPlayer1.setText("PEDIR UNA LETRA");
        pedirLetraPlayer1.setFocusable(false);
        pedirLetraPlayer1.setPreferredSize(new java.awt.Dimension(80, 30));
        pedirLetraPlayer1.setRequestFocusEnabled(false);
        pedirLetraPlayer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pedirLetraPlayer1ActionPerformed(evt);
            }
        });

        jLabel2.setText("PUNTAJE:");

        puntajePlayer1.setText("0");

        javax.swing.GroupLayout panelPlayer1Layout = new javax.swing.GroupLayout(panelPlayer1);
        panelPlayer1.setLayout(panelPlayer1Layout);
        panelPlayer1Layout.setHorizontalGroup(
            panelPlayer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelPlayer1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPlayer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPlayer1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(letrasJugador1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelPlayer1Layout.createSequentialGroup()
                        .addGroup(panelPlayer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelPlayer1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(puntajePlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelPlayer1Layout.createSequentialGroup()
                                .addComponent(mostrarCombinaciones1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pedirLetraPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        panelPlayer1Layout.setVerticalGroup(
            panelPlayer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPlayer1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelPlayer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(puntajePlayer1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(panelPlayer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(letrasJugador1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(panelPlayer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mostrarCombinaciones1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pedirLetraPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        gamePanels.add(panelPlayer1, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 510, -1, -1));
        gamePanels.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 500, 850, 20));

        panelPlayer2.setPreferredSize(new java.awt.Dimension(400, 250));

        mostrarCombinaciones2.setText("MOSTRAR COMBINACIONES");
        mostrarCombinaciones2.setEnabled(false);
        mostrarCombinaciones2.setFocusable(false);
        mostrarCombinaciones2.setPreferredSize(new java.awt.Dimension(190, 30));
        mostrarCombinaciones2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarCombinaciones2ActionPerformed(evt);
            }
        });

        jLabel5.setText("LETRAS EN MANO:");

        letrasJugador2.setFont(new java.awt.Font("Candara Light", 1, 24)); // NOI18N
        letrasJugador2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        letrasJugador2.setText("C A S A");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("JUGADOR 2");

        pedirLetraPlayer2.setText("PEDIR UNA LETRA");
        pedirLetraPlayer2.setEnabled(false);
        pedirLetraPlayer2.setFocusable(false);
        pedirLetraPlayer2.setPreferredSize(new java.awt.Dimension(180, 30));
        pedirLetraPlayer2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pedirLetraPlayer2ActionPerformed(evt);
            }
        });

        jLabel7.setText("PUNTAJE:");

        puntajePlayer2.setText("0");

        javax.swing.GroupLayout panelPlayer2Layout = new javax.swing.GroupLayout(panelPlayer2);
        panelPlayer2.setLayout(panelPlayer2Layout);
        panelPlayer2Layout.setHorizontalGroup(
            panelPlayer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelPlayer2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPlayer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPlayer2Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(letrasJugador2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelPlayer2Layout.createSequentialGroup()
                        .addGroup(panelPlayer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelPlayer2Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(puntajePlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelPlayer2Layout.createSequentialGroup()
                                .addComponent(mostrarCombinaciones2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pedirLetraPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 6, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelPlayer2Layout.setVerticalGroup(
            panelPlayer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPlayer2Layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelPlayer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(puntajePlayer2))
                .addGap(45, 45, 45)
                .addGroup(panelPlayer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(letrasJugador2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(panelPlayer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mostrarCombinaciones2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pedirLetraPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        gamePanels.add(panelPlayer2, new org.netbeans.lib.awtextra.AbsoluteConstraints(475, 510, -1, -1));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gamePanels.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 510, 30, 250));

        jLabel8.setText("TURNO:");
        gamePanels.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 10, 50, -1));

        labelTurnos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTurnos.setText("1");
        gamePanels.add(labelTurnos, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 0, 30, 30));

        getContentPane().add(gamePanels, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 800));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnJugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJugarActionPerformed
        initComponents2();
        
        menu.setVisible(false);
        gamePanels.setVisible(true);
        cambiarPlayer();
        crearLetrasJugadores();
        letrasJugador1.setText(letrasJugadores[0]);
        letrasJugador2.setText(letrasJugadores[1]);
    }//GEN-LAST:event_btnJugarActionPerformed

    private void btnAjustesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAjustesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAjustesActionPerformed

    private void tableroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableroKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_tableroKeyPressed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if (mover) {
            administrarEntrada(evt.getKeyCode());
        }
    }//GEN-LAST:event_formKeyPressed

    private void mostrarCombinaciones() {
        panelCombinations.removeAll();
        panelPuntajes.removeAll();
        combinaciones = combinar.crearPalabras(letrasJugadores[playerActual]);

        if (combinaciones.size() == 0) {
            String linea = "NO HAY COMBINACIONES POSIBLES";
            titleCombinations.setText(linea);
        } else {
            titleCombinations.setText("COMBINACIONES POSIBLES");
            JButton[] btnsCombinations = new JButton[combinaciones.size() / 2];
            JLabel[] lblsCombinations = new JLabel[combinaciones.size() / 2];
            for (int j = 0; j < btnsCombinations.length; j++) {
                btnsCombinations[j] = new JButton();
                btnsCombinations[j].setText(combinaciones.get(j));
                btnsCombinations[j].setName(String.valueOf(j));
                btnsCombinations[j].setPreferredSize(dimensionCombinaciones);
                btnsCombinations[j].setFont(fontCombinaciones);
                //btnsCombinations[j].setBorder(BorderFactory.createMatteBorder(5, 5,5,5, Color.black));
                btnsCombinations[j].setHorizontalAlignment(JLabel.CENTER);
                btnsCombinations[j].addMouseListener(this);
                btnsCombinations[j].setFocusable(false);

                lblsCombinations[j] = new JLabel();
                lblsCombinations[j].setText(combinaciones.get(j + combinaciones.size() / 2));
                lblsCombinations[j].setPreferredSize(dimensionPuntajes);
                lblsCombinations[j].setFont(fontPuntajes);
                lblsCombinations[j].setHorizontalAlignment(JLabel.CENTER);

                panelCombinations.add(btnsCombinations[j]);
                panelPuntajes.add(lblsCombinations[j]);
            }

        }
        panelCombinations.updateUI();
        panelPuntajes.updateUI();
    }

    private void mostrarCombinaciones2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarCombinaciones2ActionPerformed

        mostrarCombinaciones();
        // mostrarCombinaciones1.setEnabled(false);
        mostrarCombinaciones2.setEnabled(false);

    }//GEN-LAST:event_mostrarCombinaciones2ActionPerformed

    private void mostrarCombinaciones1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarCombinaciones1ActionPerformed

        mostrarCombinaciones();
        mostrarCombinaciones1.setEnabled(false);
        // mostrarCombinaciones2.setEnabled(false);
    }//GEN-LAST:event_mostrarCombinaciones1ActionPerformed

    private void pedirLetraPlayer1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pedirLetraPlayer1ActionPerformed
        popupMenu1.setLocation(pedirLetraPlayer1.getLocationOnScreen().x + 180, pedirLetraPlayer1.getLocationOnScreen().y);
        popupMenu1.setVisible(true);
        
    }//GEN-LAST:event_pedirLetraPlayer1ActionPerformed

    private void pedirLetraPlayer2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pedirLetraPlayer2ActionPerformed
        popupMenu1.setLocation(pedirLetraPlayer2.getLocationOnScreen().x + 180, pedirLetraPlayer2.getLocationOnScreen().y);
        popupMenu1.setVisible(true);
        mostrarCombinaciones2.setEnabled(true);
    }//GEN-LAST:event_pedirLetraPlayer2ActionPerformed

    private void vocalBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vocalBTNActionPerformed
        colocarCadenaAnterior();
        if (letrasJugadores[playerActual].length() < letrasMaximas) {
            int posRandom = (int) (Math.random() * VOCALES.length);
            letrasJugadores[playerActual] += (char) VOCALES[posRandom];
            if(playerActual == 0){
                mostrarCombinaciones1.setEnabled(true);
                letrasJugador1.setText(letrasJugadores[playerActual]);
            }else{
                mostrarCombinaciones2.setEnabled(true);
                letrasJugador2.setText(letrasJugadores[playerActual]);
            }
            verificarFinJuego();
        }

        popupMenu1.setVisible(false);
        cambiarPlayer();
    }//GEN-LAST:event_vocalBTNActionPerformed

    private void consonanteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consonanteBTNActionPerformed
        colocarCadenaAnterior();
        if (letrasJugadores[playerActual].length() < letrasMaximas) {
            int posRandom = (int) (Math.random() * CONSONANTES.length);
            letrasJugadores[playerActual] += (char) CONSONANTES[posRandom];

            if(playerActual == 0){
                mostrarCombinaciones1.setEnabled(true);
                letrasJugador1.setText(letrasJugadores[playerActual]);
            }else{
                mostrarCombinaciones2.setEnabled(true);
                letrasJugador2.setText(letrasJugadores[playerActual]);
            }
            verificarFinJuego();
        }
        popupMenu1.setVisible(false);
        cambiarPlayer();
    }//GEN-LAST:event_consonanteBTNActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        alertaFinJuego.setVisible(false);
        menu.setVisible(true);
        gamePanels.setVisible(false);

    }//GEN-LAST:event_jButton1ActionPerformed

    @Override
    public void mousePressed(MouseEvent e) {
    }

    public void mouseReleased(MouseEvent e) {
    }

    public void mouseClicked(MouseEvent e) {
        mover = true;
        // retirarLetrasUsadas();
        colocarCadenaAnterior();
        // System.out.println("Component name: " + e.getComponent().getName());
        // System.out.println( );
        cadena = combinaciones.get(Integer.valueOf(e.getComponent().getName()));

        puntaje = Integer.valueOf(combinaciones.get(Integer.valueOf(e.getComponent().getName()) + combinaciones.size() / 2));
        fila = 0;
        columna = 0;
        orientacion = true;

        guardarCadena();
        administrarEntrada(0);
        actualizarTurno();
        actualizarTurno();
        // dibujarCadena();

    }

    public void mouseEntered(MouseEvent e) {
    }

    public void mouseExited(MouseEvent e) {
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Scrabble.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Scrabble.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Scrabble.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Scrabble.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Scrabble().setVisible(true);
            }
        });
    }

    private void actualizarTurno() {
        labelTurnos.setText(String.valueOf(turno));
    }

    private void createLabels() {

        for (int i = 0; i < labels.length; i++) {
            for (int j = 0; j < labels.length; j++) {
                labels[i][j] = new JLabel();
                labels[i][j].setText(" ");
                labels[i][j].setFont(fontTablero);
                labels[i][j].setHorizontalAlignment(JLabel.CENTER);
                labels[i][j].setBorder(BorderFactory.createLineBorder(Color.BLACK));
                //System.out.println(jLabel2.getHorizontalTextPosition());

                labels[i][j].setPreferredSize(dimensionTablero);
                tablero.add(labels[i][j]);
            }
        }

    }

    private void administrarEntrada(int code) {
        switch (code) {
            case 87:
                if (fila > 0) {
                    fila--;
                }
                break;
            case 83:
                if (orientacion == true) {
                    if (fila < labels.length - 1) {
                        fila++;
                    }

                } else {
                    if (fila <= labels.length - 1 - cadena.length()) {
                        fila++;
                    }
                }
                break;

            case 65:
                if (columna > 0) {
                    columna--;
                }
                break;

            case 68:
                if (orientacion == true) {

                    if (columna <= labels.length - 1 - cadena.length()) {
                        columna++;
                    }
                } else {
                    if (columna < labels.length - 1) {
                        columna++;
                    }
                }

                break;

            case 32: //tecla espacio - cambiar orientación
                orientacion = !orientacion;
                if (orientacion) {
                    if (columna > labels.length - 1 - cadena.length()) {
                        columna = labels.length - cadena.length();
                    }
                } else {

                    if (fila > labels.length - 1 - cadena.length()) {
                        fila = labels.length - cadena.length();
                    }
                }
                break;
            case 10:
                modificarCadena();
                if (palabrasInsertadas == 0) {
                    if (valido) {
                        jugar();
                        cambiarPlayer();
                    }
                } else {
                    if (valido && intersecciones > 0) {

                        jugar();
                        cambiarPlayer();

                    }
                }
                verificarFinJuego();
                break;
        }
        // System.out.println(fila + " " + columna + " code: " + code);
        modificarCadena();

    }

    private void verificarFinJuego() {
        if (turno == turnoMaximo) {
            if (puntajesJugadores[0] > puntajesJugadores[1]) {
                labelGanador.setText("gana player 1".toUpperCase());
                alertaFinJuego.setVisible(true);
            } else if (puntajesJugadores[0] < puntajesJugadores[1]) {
                labelGanador.setText("gana player 2".toUpperCase());
                alertaFinJuego.setVisible(true);
            } else {
                labelGanador.setText("Empate".toUpperCase());
                alertaFinJuego.setVisible(true);
            }
        }
    }

    private void modificarCadena() {
        if (mover) {

            colocarCadenaAnterior();
            guardarCadena();
            colocarCadena();
            valido = ubicacionValida();
            verificarIntersecciones();
            dibujarCadena();
        }
    }

    private void verificarIntersecciones() {
        intersecciones = 0;
        if (orientacion) {
            for (int i = 0; i < cadena.length(); i++) {
                if ((labels[fila][columna + i].getText().charAt(0) == (cadenaAnterior.charAt(i)))) {
                    intersecciones++;
                }
            }
        } else {
            for (int i = 0; i < cadena.length(); i++) {
                if ((labels[fila + i][columna].getText().charAt(0) == (cadenaAnterior.charAt(i)))) {
                    intersecciones++;
                }
            }

        }
    }

    private void jugar() {
        retirarLetrasUsadas();
        puntajesJugadores[playerActual] += puntaje;
        palabrasInsertadas++;
    }

    private void cambiarPlayer() {
        //modificarCadena();
        turno++;
        actualizarTurno();
        mover = false;
        panelCombinations.removeAll();
        panelPuntajes.removeAll();
        panelCombinations.updateUI();
        panelPuntajes.updateUI();
        limpiar = false;
        if (playerActual == -1) {
            playerActual = 1;
        }
        if (playerActual == 0) {
            letrasJugador1.setText(letrasJugadores[playerActual]);
            panelPlayer1.setBorder(BorderFactory.createEmptyBorder());
            panelPlayer2.setBorder(bordeContenedorPlayer);
            pedirLetraPlayer1.setEnabled(false);
            pedirLetraPlayer2.setEnabled(true);
            mostrarCombinaciones2.setEnabled(true);
            mostrarCombinaciones1.setEnabled(false);
            puntajePlayer1.setText(String.valueOf(puntajesJugadores[playerActual]));
            playerActual = 1;
        } else {
            puntajePlayer2.setText(String.valueOf(puntajesJugadores[playerActual]));
            letrasJugador2.setText(letrasJugadores[playerActual]);
            panelPlayer2.setBorder(BorderFactory.createEmptyBorder());
            panelPlayer1.setBorder(bordeContenedorPlayer);
            pedirLetraPlayer1.setEnabled(true);
            pedirLetraPlayer2.setEnabled(false);
            mostrarCombinaciones2.setEnabled(false);
            mostrarCombinaciones1.setEnabled(true);
            playerActual = 0;
        }
    }

    private boolean ubicacionValida() {

        if (orientacion) {
            for (int i = 0; i < cadena.length(); i++) {
                if (cadenaAnterior.charAt(i) != ' ' && (labels[fila][columna + i].getText().charAt(0) != (cadenaAnterior.charAt(i)))) {
                    return false;
                }
            }
        } else {
            for (int i = 0; i < cadena.length(); i++) {
                if (cadenaAnterior.charAt(i) != ' ' && (labels[fila + i][columna].getText().charAt(0) != (cadenaAnterior.charAt(i)))) {
                    return false;
                }
            }

        }

        return true;
    }

    private void retirarLetrasUsadas() {
        String cadenaActual = letrasJugadores[playerActual];

        for (int i = 0; i < cadena.length(); i++) {
            if (cadenaAnterior.charAt(i) != (cadena.charAt(i))) {
                //System.out.println("If: Tablero: " + cadenaAnterior + "-- Cadena: " + cadena.charAt(i));

                for (int j = 0; j < cadenaActual.length(); j++) {
                    if (cadena.charAt(i) == cadenaActual.charAt(j)) {
                        String parte1 = cadenaActual.substring(0, j);
                        String parte2 = cadenaActual.substring(j + 1, cadenaActual.length());
                        cadenaActual = parte1 + parte2;
                        break;
                    }
                }

            }

        }
        letrasJugadores[playerActual] = cadenaActual;

    }

    private void dibujarCadena() {
        if (palabrasInsertadas == 0) {
            // if (valido) {
            dibujar(Color.BLACK);
            // } else {
            //  dibujar(Color.RED);
            // }
        } else {
            if (valido && intersecciones > 0) {
                dibujar(Color.BLACK);
            } else {
                dibujar(Color.RED);
            }
        }
    }

    private void dibujar(Color color) {
        if (orientacion) {
            for (int i = 0; i < cadena.length(); i++) {
                labels[fila][columna + i].setForeground(color);
            }
        } else {
            for (int i = 0; i < cadena.length(); i++) {
                labels[fila + i][columna].setForeground(color);
            }

        }

    }

    private void colocarCadena() {
        if (orientacion) {
            for (int i = 0; i < cadena.length(); i++) {

                labels[fila][columna + i].setText(String.valueOf(cadena.charAt(i)));

            }
        } else {
            for (int i = 0; i < cadena.length(); i++) {
                labels[fila + i][columna].setText(String.valueOf(cadena.charAt(i)));

            }
        }

        //System.out.println(cadenaAnterior);
    }

    private void guardarCadena() {
        cadenaAnterior = "";
        if (orientacion) {
            for (int i = 0; i < cadena.length(); i++) {
                cadenaAnterior += labels[fila][columna + i].getText();
            }
        } else {
            for (int i = 0; i < cadena.length(); i++) {
                cadenaAnterior += labels[fila + i][columna].getText();
            }
        }
        filaAnterior = fila;
        columnaAnterior = columna;
        orientacionAnterior = orientacion;
    }

    private void colocarCadenaAnterior() {
        if (limpiar) {
            if (orientacionAnterior) {
                for (int i = 0; i < cadenaAnterior.length(); i++) {
                    labels[filaAnterior][columnaAnterior + i].setText(String.valueOf(cadenaAnterior.charAt(i)));
                    labels[filaAnterior][columnaAnterior + i].setForeground(Color.BLACK);
                }
            } else {
                for (int i = 0; i < cadenaAnterior.length(); i++) {
                    labels[filaAnterior + i][columnaAnterior].setText(String.valueOf(cadenaAnterior.charAt(i)));
                    labels[filaAnterior + i][columnaAnterior].setForeground(Color.BLACK);
                }
            }
        }
        limpiar = true;
    }

    private void crearLetrasJugadores() {
        for (int i = 0; i < letrasIniciales; i++) {
            int vocalOConsonante = (int) (Math.random() * 2);
            if (vocalOConsonante == 0) {
                int posRandom = (int) (Math.random() * VOCALES.length);
                letrasJugadores[0] += (char) VOCALES[posRandom];
                posRandom = (int) (Math.random() * VOCALES.length);
                letrasJugadores[1] += (char) VOCALES[posRandom];
            } else {
                int posRandom = (int) (Math.random() * CONSONANTES.length);
                letrasJugadores[0] += (char) CONSONANTES[posRandom];
                posRandom = (int) (Math.random() * CONSONANTES.length);
                letrasJugadores[1] += (char) CONSONANTES[posRandom];
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog alertaFinJuego;
    private javax.swing.JButton btnAjustes;
    private javax.swing.JButton btnJugar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton consonanteBTN;
    private javax.swing.JPanel contenedorCombinaciones;
    private javax.swing.JPanel gamePanels;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelGanador;
    private javax.swing.JLabel labelTurnos;
    private javax.swing.JLabel letrasJugador1;
    private javax.swing.JLabel letrasJugador2;
    private javax.swing.JPanel menu;
    private javax.swing.JButton mostrarCombinaciones1;
    private javax.swing.JButton mostrarCombinaciones2;
    private javax.swing.JPanel panelCombinations;
    private javax.swing.JPanel panelPedirLetra;
    private javax.swing.JPanel panelPlayer1;
    private javax.swing.JPanel panelPlayer2;
    private javax.swing.JPanel panelPuntajes;
    private javax.swing.JButton pedirLetraPlayer1;
    private javax.swing.JButton pedirLetraPlayer2;
    private javax.swing.JPopupMenu popupMenu1;
    private javax.swing.JLabel puntajePlayer1;
    private javax.swing.JLabel puntajePlayer2;
    private javax.swing.JPanel tablero;
    private javax.swing.JLabel title;
    private javax.swing.JLabel titleCombinations;
    private javax.swing.JButton vocalBTN;
    // End of variables declaration//GEN-END:variables
    private JLabel[][] labels;
    private String[] letrasJugadores;
    private int[] puntajesJugadores;
    private String cadena;
    private String cadenaAnterior;

    private int puntaje;
    private int fila;
    private int columna;
    private int playerActual;
    private int filaAnterior;
    private int columnaAnterior;
    private int letrasIniciales;
    private int letrasMaximas;
    private int intersecciones;
    private int turno;
    private int turnoMaximo;
    private int palabrasInsertadas;

    private boolean orientacion;
    private boolean orientacionAnterior;
    private boolean mover;
    private boolean limpiar;
    private boolean valido;

    private Diccionario diccionario;
    private ArrayList<String> combinaciones;
    private Combinar combinar;

    private final int[] VOCALES = {97, 101, 105, 111, 117};
    private final int[] LETRASNOJUGABLES = {107, 119};
    private final int[] CONSONANTES = {98, 99, 100, 102, 103, 104, 106, 108, 109, 110, 112, 113, 114, 115, 116, 118, 120, 121, 122};

    private Font fontCombinaciones;
    private Font fontTablero;
    private Font fontPuntajes;

    private Dimension dimensionTablero;
    private Dimension dimensionCombinaciones;
    private Dimension dimensionPuntajes;

    private Border bordeContenedorPlayer;
    private Border bordeMenuPopup;

    private void initComponents2() {
        labels = new JLabel[10][10];
        letrasJugadores = new String[2];
        letrasJugadores[0] = "";
        letrasJugadores[1] = "";
        puntajesJugadores = new int[2];
        cadena = "";
        fila = 0;
        columna = 0;
        playerActual = -1;
        filaAnterior = fila;
        columnaAnterior = columna;
        orientacion = true;
        orientacionAnterior = true;
        mover = false;
        cadenaAnterior = "";
        limpiar = true;

        
        popupMenu1.add(panelPedirLetra);

        valido = true;

        letrasIniciales = 4;
        letrasMaximas = 9;

        turno = 0;
        turnoMaximo = 5;
        palabrasInsertadas = 0;

        fontCombinaciones = new Font("Impact", Font.PLAIN, 20);
        fontTablero = new Font("Impact", Font.PLAIN, 14);
        fontPuntajes = new Font("Impact", Font.PLAIN, 14);
        dimensionTablero = new Dimension(40, 40);
        dimensionCombinaciones = new Dimension(120, 30);
        dimensionPuntajes = new Dimension(100, 30);
        bordeContenedorPlayer = BorderFactory.createLineBorder(Color.BLACK, 2, true);
        bordeMenuPopup = BorderFactory.createLineBorder(Color.BLACK, 2, true);

        createLabels();
    }
}
